version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: vtv_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: vtv_db
      POSTGRES_USER: vtv-dev-1
      POSTGRES_PASSWORD: abc@123
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    networks:
      - vtv_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U vtv-dev-1 -d vtv_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: vtv_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: ["redis-server", "--requirepass", "abc@123"]
    volumes:
      - redis_data:/data
    networks:
      - vtv_network
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "abc@123", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # NestJS Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: vtv_app
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: production
      DATABASE_HOST: postgres
      DATABASE_PORT: 5432
      DATABASE_NAME: vtv_db
      DATABASE_USER: vtv-dev-1
      DATABASE_PASSWORD: abc@123
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: abc@123
      REDIS_DB: 0
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - vtv_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  vtv_network:
    driver: bridge
